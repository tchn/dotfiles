truecrypt_mount() {
    set_default
    truecrypt --mount --filesystem=hfsplus
}

truecrypt_umount() {
    set_default
    local i
    sudo umount /media/truecrypt*
    sudo umount /tmp/.truecrypt_aux_mnt*
    for i in /dev/mapper/truecrypt[0-9]#; do
        sudo cryptsetup -v remove "$i"
    done
}

drop_caches() {
    set_default;
    sync;
    if asroot; then
        echo -n "Dropping cache... ";
        echo 3 >/dev/null | sudo tee /proc/sys/vm/drop_caches >/dev/null;
        echo "Done";
    fi;
}

cp2clip() {
    set_default
    if_exists $(which xclip) && xclip -i -selection clipboard
}

mcd() {
    set_default
    mkdir -p "$1" && cd "$1"
}

wifiscan() {
    set_default;
    local wlan="$1"
    if_exists $(whereis iwlist | awk -F ' ' '{print $2}') && sudo iwlist "$wlan" scan | egrep -i 'cell|essid|encryption|quality';
}

ccscope() {
    set_default;
    local project_dir="$1";
    if [[ ! -d "$project_dir" ]]; then echo "project dir needs to be given"; fi;
    local cscope_file="${project_dir}/cscope.files";
    find "$project_dir" -name "*.c" -o -name "*.h" -o -name "*.cpp" | tee "${cscope_file}";
    pushd "$project_dir";
    cscope -b -q -k cscope.files;
    popd;
}

randstr() {
    set_default;
    local length="$1";
    strings /dev/urandom | grep -o '[[:alnum:]]' | head -n "$length" | tr -d '\n';
}

keycode() {
    set_default;
    xev | grep -A2 --line-buffered '^KeyRelease' | sed -n '/keycode /s/^.*keycode \([0-9]*\).* (.*, \(.*\)).*$/\1 \2/p'
}

capdump() {
    set_default;
    local interface;
    local my_ether_addr;
    local out_filename;
    interface="$1";
    out_filename=$(echo $(date +%Y%m%d-%s)).pcap;
    my_ether_addr=$(cat /sys/class/net/${interface}/address)
    dumpcap -i "${interface}" -w "${out_filename}" -f "ether host not ${my_ether_addr}" -P;
}

beap() {
    set_default;
    local ssid psk in_inf;
    if [[ ! -f hostapd.conf ]]; then
        ssid="$1";
        in_inf="$2";
        echo -n "Input PSK: ";
        while read -s psk; do break; done
    cat > hostapd.conf <<EOF
ctrl_interface=/var/run/hostapd
interface=$in_inf
driver=nl80211
ssid=$ssid
channel=6
hw_mode=g
auth_algs=1
wpa=3
wpa_passphrase=$psk
wpa_key_mgmt=WPA-PSK
wpa_pairwise=CCMP
rsn_pairwise=CCMP
EOF
    fi;
    chmod 0600 hostapd.conf;
    sudo hostapd hostapd.conf;
}

add_private_route() {
    set_default;
    gw=$1
	for ip in 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16
	do
		echo "# sudo ip route add ${ip} via ${gw}"
		sudo ip route add ${ip} via ${gw}
	done
}

lscap() {
    set_default;
    for i in /proc/[0-9]*/status; do
        p=${${i##/proc/}%%/status};
        CAP=$(grep CapPrm "$i" | grep -v -v ffffff | grep -v 0000000000000);
        if [[ ! -z "$CAP" ]]; then
            grep Name "$i"; echo "PID: ${p} - ${CAP}";
        fi;
    done;
}

dhcpsrv() {
    set_default;
    local intf; # network interface
    local srv_ip; # listen-address of dnsmasq
    local range_start # dhcp-range start IP
    local range_end # dhcp-range end IP
    local conf # conf file to save;
    local tftp_root # tftp root directory
    local netmask #netmask num
    local answer

    while getopts ":dhi:I:s:e:o:t:" opt
    do 
        case "$opt" in
            d)
                set -x;
                ;;
            h)
                printf "%s\n" "Usage: $0 [ -d ] -i eth1 -I 10.1.1.254 -s 10.1.1.10 -e 10.1.1.30 -o dnsmasq.conf [ -t tftp_root ]";
                return;
                ;;
            i)
                intf=$OPTARG;
                ;;
            I)
                srv_ip=$OPTARG;
                ;;
            s)
                range_start=$OPTARG;
                ;;
            e)
                range_end=$OPTARG;
                ;;
            o) if [ -f $OPTARG ]
                   then
                           while true
                           do
                                   echo "${OPTARG} already exists. Overwrite? [y/n]"
                                   read answer
                                   case "$answer" in
                                           ([Yy]) echo "Overwriting existing conf and running..."
                                                   conf=$OPTARG 
                                                   break ;;
                                           (*) echo "Quitting..."
                                                   return 1 ;;
                                   esac
                           done
                   else
                           conf=$OPTARG 
                   fi
                ;;
            t)
                tftp_root=$OPTARG;
                ;;

        esac
    done

    cat > "$conf" <<EOF
log-facility=-
no-hosts
interface=$intf
no-poll
bind-interfaces
except-interface=lo
listen-address=$srv_ip
dhcp-range=$range_start,$range_end
dhcp-option=option:router,$srv_ip
dhcp-lease-max=40
pid-file=/var/run/dnsmasq-${intf}.pid
EOF

    if [[ ! -z "$tftp_root" ]];
    then
        cat >> "$conf" <<EOF
enable-tftp
tftp-root=$tftp_root,$intf
tftp-secure
tftp-lowercase
tftp-max=20
EOF
    fi

    netmask=$(ipcalc -nb "$srv_ip" | egrep -i netmask | awk '{print $4}');
    sudo ip link set "$intf" down;
    sudo ip link set "$intf" up;
    sudo ip addr add "${srv_ip}/${netmask}" dev "$intf";
    sudo dnsmasq -C "$conf" -k
}

smbsrv() {
    set_default;
    local intf;
    local path2share;
    local path2rwshare;
    local conf;

    while getopts ":dhi:o:s:w:" opt;
    do
        case "$opt" in
            d)
                set -x;
                ;;

            h)
                printf "%s\n" "Usage: ${0} [ -d ] -i eth0 -o smb.conf -s path/to/share [ -w /path/to/rwshare ]";
                return 0;
                ;;

            i)
                intf=$OPTARG;
                ;;

            o)
                if [ -f $OPTARG ]; then
                    printf "%s\n" "${OPTARG} already exists!";
                    return 1;
                else
                    conf=$OPTARG;
                fi
                ;;

            s)
                if [ -d $OPTARG ]; then
                    path2share=$OPTARG;
                else
                    return 1;
                fi
                ;;

            w)
                if [ -d $OPTARG ]; then
                    path2rwshare=$OPTARG;
                else
                    return 1;
                fi
                ;;
        esac

    done;

    cat > "$conf" << EOF
[global]
workgroup = WORKGROUP
server string = smbsrv
disable netbios = yes
dns proxy = no
interfaces = 127.0.0.1 $intf
log file = /var/log/samba/log.%m
max log size = 1000
guest ok = no
read only = yes
map to guest = Bad Password
dos charset = cp932
min protocol = NT1
create mask = 0644
directory mask = 0755
socket options = SO_KEEPALIVE IPTOS_LOWDELAY TCP_NODELAY
invalid users = root
browseable = no
load printers = no
usershare allow guest = yes
usershare owner only = false

[share]
path = $path2share
guest ok = yes
browseable = yes
EOF

    if [[ ! -z "$path2rwshare" ]]; then
        cat >> "$conf" << EOF

[rw]
path = $path2rwshare
guest ok = yes
writable = yes
force user = nobody
EOF
    fi

    printf "%s\n" "Start smbd .. Press Ctrl-C to kill";
    sudo smbd -F -S -d 2 -s "$conf" &;
    trap "sudo kill $!" SIGINT;
}

ipa() {
    set_default;
    local interface="$1";
    ip a s "$interface" | awk -F'[/ ]+' '/inet[^6]/{print $3}'
}
